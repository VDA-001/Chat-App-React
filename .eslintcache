[{"/home/vishal/Projects/chat-app-react/src/App.js":"1","/home/vishal/Projects/chat-app-react/src/reportWebVitals.js":"2","/home/vishal/Projects/chat-app-react/src/ApiKey.js":"3","/home/vishal/Projects/chat-app-react/src/index.js":"4"},{"size":2629,"mtime":1606464183058,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1606395776056,"results":"7","hashOfConfig":"6"},{"size":476,"mtime":1606463742920,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1606395776056,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"ywpk4g",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/home/vishal/Projects/chat-app-react/src/App.js",["20"],"import React, {useEffect, useRef, useState} from 'react';\nimport './App.css';\n// import { Picker } from 'emoji-mart'\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\nimport './ApiKey'\n\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>⚛️</h1>\n        <SignOut />\n      </header>\n      <section>\n        {user ? <ChatRoom />:<SignIn />}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn(){\n  const signInWithGoogle = ()=>{\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider)\n  }\n  return(\n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\nfunction SignOut(){\n  return auth.currentUser && (\n    <button onClick={()=>auth.signOut()}>Sign out</button>\n  ) \n}\nfunction ChatRoom(){\n  const messageRef = firestore.collection('messages');\n  const query = messageRef.orderBy('createdAt').limitToLast(25);\n  const [messages] = useCollectionData(query,{idField:'id'});\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    const {uid, photoURL} = auth.currentUser;\n\n    await messageRef.add({\n      text:formValue,\n      createdAt:firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n    setFormValue('');\n  }\n\n  // const addEmoji = e =>{\n  //   let emoji = e.native;\n  //   setFormValue({\n  //     text: formValue+emoji\n  //   });\n  // };\n  const dummy = useRef();\n  useEffect(()=>{\n    dummy.current.scrollIntoView({behaviour:'smooth'});\n  },[messages])\n\n  return(\n    <>\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n        <span ref={dummy}></span>\n      </main>\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder = \"say something nice\" />\n        <button type=\"submit\" disabled={!formValue}>Send</button>\n      </form>\n      {/* <span>\n        <Picker onSelect={addEmoji} />\n      </span> */}\n    </>\n  )\n}\nfunction ChatMessage(props){\n  const {text, uid, photoURL} = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={`message ${messageClass}`} > \n      <img src={photoURL} />\n      <p>{text}</p>\n    </div>\n  )\n}\n\nexport default App;\n","/home/vishal/Projects/chat-app-react/src/reportWebVitals.js",[],"/home/vishal/Projects/chat-app-react/src/ApiKey.js",[],"/home/vishal/Projects/chat-app-react/src/index.js",[],["21","22"],{"ruleId":"23","severity":1,"message":"24","line":102,"column":7,"nodeType":"25","endLine":102,"endColumn":29},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["30"],"no-negated-in-lhs",["31"],"no-global-assign","no-unsafe-negation"]